// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsAggregator.DataAccess;

#nullable disable

namespace NewsAggregator.DataAccess.Migrations
{
    [DbContext(typeof(NewsAggregatorDbContext))]
    [Migration("20221009184015_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NewsAggregator.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalArticleUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("NewsAggregator.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Politics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tech"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Showbiz"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("NewsAggregator.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("NewsAggregator.Domain.Entities.RSSFeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FeedUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("RSSFeed", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            FeedUrl = "https://moxie.foxnews.com/google-publisher/politics.xml",
                            IsActive = true,
                            Name = "Fox news - bussines"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            FeedUrl = "https://moxie.foxnews.com/google-publisher/science.xml",
                            IsActive = true,
                            Name = "Fox news - science"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            FeedUrl = "https://moxie.foxnews.com/google-publisher/tech.xml",
                            IsActive = true,
                            Name = "Fox news - technology"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 7,
                            FeedUrl = "https://moxie.foxnews.com/google-publisher/sports.xml",
                            IsActive = true,
                            Name = "Fox news - sports"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 8,
                            FeedUrl = " https://moxie.foxnews.com/google-publisher/travel.xml",
                            IsActive = true,
                            Name = "Fox news - travel"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 8,
                            FeedUrl = " https://moxie.foxnews.com/google-publisher/health.xml",
                            IsActive = true,
                            Name = "Fox news - health"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            FeedUrl = "https://rss.nytimes.com/services/xml/rss/nyt/Business.xml",
                            IsActive = true,
                            Name = "New York Times - bussines"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            FeedUrl = "https://rss.nytimes.com/services/xml/rss/nyt/Science.xml",
                            IsActive = true,
                            Name = "New York Times - science"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            FeedUrl = "https://rss.nytimes.com/services/xml/rss/nyt/Technology.xml",
                            IsActive = true,
                            Name = "New York Times - tehcnology"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 7,
                            FeedUrl = "https://rss.nytimes.com/services/xml/rss/nyt/Sports.xml",
                            IsActive = true,
                            Name = "New York Times - sports"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 8,
                            FeedUrl = "https://rss.nytimes.com/services/xml/rss/nyt/Health.xml",
                            IsActive = true,
                            Name = "New York Times - health"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 8,
                            FeedUrl = "https://rss.nytimes.com/services/xml/rss/nyt/Travel.xml",
                            IsActive = true,
                            Name = "New York Times - travel"
                        });
                });

            modelBuilder.Entity("NewsAggregator.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "bob@email.com",
                            FirstName = "Bob",
                            IsAdmin = false,
                            LastName = "Bobsky",
                            Password = "H,?????mI??I8",
                            Username = "bBobsky"
                        },
                        new
                        {
                            Id = 2,
                            Email = "john.doe@email.com",
                            FirstName = "Jon",
                            IsAdmin = false,
                            LastName = "Doe",
                            Password = "H,?????mI??I8",
                            Username = "jDoe"
                        },
                        new
                        {
                            Id = 3,
                            Email = "tom@admin.com",
                            FirstName = "Tom",
                            IsAdmin = true,
                            LastName = "Admin",
                            Password = "?:{?s%?i?? ",
                            Username = "adminTom"
                        },
                        new
                        {
                            Id = 4,
                            Email = "jill@admin.com",
                            FirstName = "Jill",
                            IsAdmin = true,
                            LastName = "Admin",
                            Password = "?:{?s%?i?? ",
                            Username = "adminJill"
                        });
                });

            modelBuilder.Entity("NewsAggregator.Domain.Entities.Article", b =>
                {
                    b.HasOne("NewsAggregator.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NewsAggregator.Domain.Entities.Comment", b =>
                {
                    b.HasOne("NewsAggregator.Domain.Entities.Article", "Article")
                        .WithMany("ArticleComments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsAggregator.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsAggregator.Domain.Entities.RSSFeed", b =>
                {
                    b.HasOne("NewsAggregator.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NewsAggregator.Domain.Entities.Article", b =>
                {
                    b.Navigation("ArticleComments");
                });
#pragma warning restore 612, 618
        }
    }
}
